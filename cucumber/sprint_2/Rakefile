# -*- coding: UTF-8 -*-
# QA Tinet 2016
# miguel.garcia@tinet.cl
begin
  require 'rubocop/rake_task'
  require 'cucumber'
  require 'cucumber/rake/task'
  require 'yaml'
  require_relative 'features/support/zip_util.rb'
  #require 'alm-rest-api'
  require 'pry'
  require 'fileutils'

  namespace :cucumber do
    namespace :planes do
      def setup_cucumber(env, browser, thread, ip_selenium, port_selenium, profile)
        cucumber = "bundle exec parallel_cucumber features/ -n #{thread} -o '"

        profiles = []
        profiles << "bci-#{env}"
        profiles << browser
        profiles << profile

        profiles.each do |p|
          cucumber << "-p #{p} "
        end
        if ip_selenium != nil
          cucumber << "IP_SELENIUM=#{ip_selenium} "
        end
        if port_selenium != nil
          cucumber << "PORT_SELENIUM=#{port_selenium} "
        end
        cucumber << "'"

        return cucumber
      end

      def zip_output(dir, status)
        zip_output = "#{dir}_#{Time.now.strftime('%Y%m%d')}_#{status}.zip"
        zf = ZipFileGenerator.new(dir, zip_output)
        zf.write
        return zip_output
      end

      def send_to_alm(conn, file_out, test_id, test_set_id, test_status)
        ALM::RestConnector.instance.init(Hash.new, conn['host'], conn['port'], conn['domain'], conn['project'])
        login = ALM.isLoggedIn(conn['user'], conn['pass'])
        ALM.loginSite()

        puts 'ALM: Obteniendo Test Instance ...'
        test_instance = ALM.readTestInstance(test_id, test_set_id)

        test_info = {}
        test_instance.first.fields.first.fields.each do |f|
          test_info[f.name] = f.value
        end

        test_run = Entity.new
        test_run.init("run")
        fields_h = [
          {name: 'test-config-id', value: test_info['test-config-id']},
          {name: 'cycle-id', value: test_info['cycle-id']},
          {name: 'test-id', value: test_info['test-id']},
          {name: 'testcycl-id', value: test_info['id']},
          {name: 'build-revision', value: 1},
          {name: 'name', value: test_info['name'] + "_cucumber_run_#{Time.now.strftime('%Y%m%d')}"},
          {name: 'owner', value: 'exvaral'},
          {name: 'subtype-id', value: 'hp.qc.run.external-test'},
          {name: 'duration', value: 0},
          {name: 'execution-date', value: Time.now.strftime('%Y-%m-%d')},
          {name: 'execution-time', value: Time.now.strftime('%H:%M:%S')},
          {name: 'status', value: test_status},
          {name: 'user-01', value: 'exvaral'}
        ]

        fields_h.each do |fh|
          field = Field.new
          field.name = fh[:name]
          field.value = fh[:value]
          test_run.fields.fields << field
        end

        puts 'ALM: Creando Test Run ...'
        test_run_id = ALM.createTestRun(test_run)
        puts "ALM: Test Run Creado [#{test_run_id}]"

        puts "ALM: Adjuntando Evidencia '#{file_out}'..."
        dir = File.expand_path(File.join(File.dirname(__FILE__), '.', file_out))
        ALM.addTestRunAttachment(test_run_id, dir, "application/zip", test_run_id)
        ALM.logout()
      end

      def validar_browser(args)
        if (args['browser'] == 'ie' || args['browser'] == 'selenium-firefox') && (args['ip_selenium'] == nil || args['port_selenium'] == nil)
          abort "Debe ingresar la DirecciÃ³n de selenium server"
        end
      end

      desc "Pruebas Planes Sitio Publico"
      task :planes_publico, [:env, :browser, :thread, :ip_selenium, :port_selenium] do |_t, args|
        args.with_defaults(env: 'dev', browser: 'firefox', thread: 1, ip_selenium:nil, port_selenium:nil)
        env = args['env']
        browser = args['browser']
        cucumber = setup_cucumber(env, browser, "alm-publico")
        puts "Ejecutando Pruebas ALM Sitio Publico ..."
        sh cucumber
      end

      desc "Pruebas Planes Sitio Privado"
      task :planes_privado, [:env, :browser, :thread, :ip_selenium, :port_selenium] do |_t, args|
        args.with_defaults(env: 'dev', browser: 'firefox')
        env = args['env']
        browser = args['browser']
        cucumber = setup_cucumber(env, browser, "alm-bcinet")
        puts "Ejecutando Pruebas ALM Sitio Privado ..."
        sh cucumber
      end

      desc "Pruebas Planes Sitio Publico y Privado"
      task :planes_all, [:env, :browser, :thread, :ip_selenium, :port_selenium] do |_t, args|
        args.with_defaults(env: 'dev', browser: 'firefox', thread: 1, ip_selenium:nil, port_selenium:nil)
        env = args['env']
        browser = args['browser']

        %W[alm:publico alm:privado].each do |task_name|
            sh "rake #{task_name}[#{env},#{browser}]" do
            puts "#{task_name} Fallo!"
          end
        end
        puts "Pruebas Finalizadas!"
      end

      desc "Pruebas Planes sprint 0 1 2"
      task :planes_todos, [:env, :browser, :thread, :ip_selenium, :port_selenium] do |_t, args|
        args.with_defaults(env: 'dev', browser: 'firefox', thread: 1, ip_selenium:nil, port_selenium:nil)
        validar_browser(args)
        cucumber = setup_cucumber(args['env'], args['browser'], args['thread'], args['ip_selenium'], args['port_selenium'], "planes_publico")
        puts "Ejecutando Pruebas..."
        sh cucumber
      end

      desc "Pruebas cpm"
      task :cpm, [:env, :browser, :cpm_id] do |_t, args|
        args.with_defaults(env: 'dev', browser: 'firefox', cpm_id:'')
        env = args['env']
        browser = args['browser']
        cpm_id = args['cpm_id']

        cucumber = setup_cucumber(env, browser, cpm_id)

        cucumber << "CPM_ID=#{cpm_id} "
        cucumber << "--format html --out results/#{cpm_id}/#{cpm_id}.html "

        if Dir.exists?("results/#{cpm_id}")
          FileUtils.rm_rf("results/#{cpm_id}")
        end

        puts "Ejecutando Pruebas #{cpm_id} ..."
        sh cucumber
      end

      desc "Pruebas Planes con Conexion a ALM"
      task :planes_alm, [:env, :browser] do |_t, args|
        args.with_defaults(env: 'dev', browser: 'firefox')
        env = args['env']
        browser = args['browser']

        if File.exists?('config/alm.yml')
            config = YAML.load_file('config/alm.yml')
            alm = config['alm']

            conn = alm['conn']
            alm['tests'].each do |test|
            cpm_id = test['tag']
            test_set_id = test['testset-id']
            test_id = test['test-id']
            test_status = "Passed"

            sh "rake cucumber:cpm[#{env},#{browser},#{cpm_id}]" do |out|
              unless out
                test_status = "Failed"
              end
            end

            file_out = zip_output("results/#{cpm_id}", test_status)
            send_to_alm(conn, file_out, test_id, test_set_id, test_status)
        end
        else
          abort "No existe archivo alm.yml"
        end
	    end
    end
  end

  namespace :docker do
     desc 'Ejecucion Cucumber con Docker'
     task :run do
         sh "docker run --name cucumber-viajes -i -t --rm cucumber-viajes"
     end
  end

  desc 'Revision Estatica de Codigo Ruby'
  RuboCop::RakeTask.new(:codecheck) do |rubotask|
    rubotask.formatters = %w(offenses html)
    rubotask.options = [['--out', 'results/rubocop_results.html']]
    rubotask.fail_on_error = false
  end

end
